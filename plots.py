import json
import os
import sys
import pandas as pd
import numpy as np
import matplotlib.pyplot as plti
from collections import defaultdict
from matplotlib.font_manager import FontProperties

# the name of the script used to simulate the user action
SCRIPT = str(sys.argv[1]).split("/")[1][:-3]

# the number of iterations performed by the benchmarker
ITERATIONS = int(sys.argv[2])

# the IP of the Android device
DEVICE_IP = str(sys.argv[3])

# the path to the folder containing the .csv files containing the network traffic captured (the path is relative to the python script)
IN_FOLDER = "Traces/"

# the path to folder where the plots have to be stored (the path is relative to the python script, which is the same as the benchmarker)

OUT_FOLDER = "Plots/"

# this function extracts the value of the features during a single iteration of the script:
# @file_path: the path to the csv file being parsed
# @is_tor: boolean value set to True in case the csv was produced under the Tor network

def process_csv(file_path, data):
	global DEVICE_IP
	# read the csv into a DataFrame object; use \t as separator
	df = pd.read_csv(file_path, sep = '\t')
	
	# replace the "." in the columns with a "_" for some columns
	df.rename(columns = {'ip.dst': 'ip_dst'}, inplace = True)
	df.rename(columns = {'ip.src': 'ip_src'}, inplace = True)

	# get the average size of incoming packets
	data['Avg In Pack'].append(df.query('ip_dst==@DEVICE_IP')['frame.len'].mean())
	
	# get the Total number of packets and append it to the dictionary
	data['# Tot Packs'].append(df[0].count())

# the dictionary containing aggregated data from all the iterations under the default network. It has:

# - one key for each feature of the network flow
# - a list containing one value of the feature measured for each iteration

# the following features are taken into account
# 1- average size of incoming packets
# 2- average size of outgoing packets
# 3- average size of all the packets 
# 4- total size of the incoming packets
# 5- total size of the outgoing packets
# 6- total size of packets
# 7- number of incoming packets
# 8- number of outgoing packets
# 9- total number of packets
# 10- duration of the network flow generated by the user action

data_default = defaultdict(list)

# an equivalent data structure keeps track of the corrsponding values of the features measured under the Tor network


data_tor = defaultdict(list)

# read the two .csv files corresponding to each iteration (one produced under the default network and one produced under the Tor network) and parse them to fill the above dictionaries

for iteration in range(ITERATIONS):

	 # the relative path to the csv gathered during the current iteration under the default network
	csv_file = IN_FOLDER + SCRIPT + "_" + str(iteration) + ".csv"
	
	# parse the csv file
	process_csv(csv_file, data_default)
	
	# the relative path to the csv gathered during the current iteration under the Tor network
	csv_file = IN_FOLDER + SCRIPT + "_tor_" + str(iteration) + ".csv"
	
	# parse the csv file
	process_csv(csv_file, data_tor)
	
	print data_default
	print data_tor



 
# the list of the indexes, i.e. the features taken into account
indexes = ['Avg In Pack', 'Avg Out Pack', 'Avg All Pack', 'Tot In Size', 'Tot Out', 'Tot Size', '# In Packs', '# Out Packs', '# Tot Packs', 'Action Duration']

# the name of the columns
cols = ['Default', 'Tor'] 
