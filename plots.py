import json
import os
import sys
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from collections import defaultdict
from matplotlib.font_manager import FontProperties

# the name of the script used to simulate the user action
SCRIPT = str(sys.argv[1]).split("/")[1][:-3]

# the number of iterations performed by the benchmarker
ITERATIONS = int(sys.argv[2])

# the IP of the Android device
DEVICE_IP = str(sys.argv[3])

# the path to the folder containing the .csv files containing the network traffic captured (the path is relative to the python script)
IN_FOLDER = "Traces/"

# the path to folder where the plots have to be stored (the path is relative to the python script, which is the same as the benchmarker)

OUT_FOLDER = "Plots/"

# this function extracts the value of the features during a single iteration of the script:
# @file_path: the path to the csv file being parsed
# @is_tor: boolean value set to True in case the csv was produced under the Tor network

def process_csv(file_path, data):
	global DEVICE_IP
	# read the csv into a DataFrame object; use \t as separator
	df = pd.read_csv(file_path, sep = '\t')
	
	# replace the "." in the columns with a "_" for some columns
	df.rename(columns = {'ip.dst': 'ip_dst'}, inplace = True)
	df.rename(columns = {'ip.src': 'ip_src'}, inplace = True)

	# get the average size of incoming packets
	data['Avg In Pack'].append(df.query('ip_dst==@DEVICE_IP')['frame.len'].mean())
	
	# get the average size of outgoing packets
	data['Avg Out Pack'].append(df.query('ip_src==@DEVICE_IP')['frame.len'].mean())
	
	# get the average size of all packets
	data['Avg All Pack'].append(df['frame.len'].mean())

	# get the total size of incoming packets
	data['Tot In Size'].append(df.query('ip_dst==@DEVICE_IP')['frame.len'].sum())
	  
	# get the total size of outgoing packets
	data['Tot Out Size'].append(df.query('ip_src==@DEVICE_IP')['frame.len'].sum())

	# get the total size of all packets
	data['Tot Size'].append(df['frame.len'].sum())
	
	# get the number of incoming packets
	data['Num In Packs'].append(df.query('ip_dst==@DEVICE_IP')['frame.number'].count())
		
	# get the number of outgoing packets
	data['Num Out Packs'].append(df.query('ip_src==@DEVICE_IP')['frame.number'].count())
		
	# get the number of all packets
	data['Num Tot Packs'].append(df['frame.number'].count())

	# get the number of packets with unique size	
	data['Num Unique Sizes'].append(df['frame.len'].unique().size)

	# get the duration of the action
	data['Action Duration'].append(df['_ws.col.Time'].iloc[-1] - df['_ws.col.Time'].iloc[0])

# the dictionary containing aggregated data from all the iterations under the default network. It has:

# - one key for each feature of the network flow
# - a list containing one value of the feature measured for each iteration

# the following features are taken into account
# 1- average size of incoming packets
# 2- average size of outgoing packets
# 3- average size of all the packets 
# 4- total size of the incoming packets
# 5- total size of the outgoing packets
# 6- total size of packets
# 7- number of incoming packets
# 8- number of outgoing packets
# 9- total number of packets
# 10- number of packets with unique size
# 11- duration of the network flow generated by the user action

data_default = defaultdict(list)

# an equivalent data structure keeps track of the corresponding values of the features measured under the Tor network
data_tor = defaultdict(list)

# read the two .csv files corresponding to each iteration (one produced under the default network and one produced under the Tor network) and parse them to fill the above dictionaries

for iteration in range(ITERATIONS):

	 # the relative path to the csv gathered during the current iteration under the default network
	csv_file = IN_FOLDER + SCRIPT + "_" + str(iteration) + ".csv"
	
	# parse the csv file
	process_csv(csv_file, data_default)
	
	# the relative path to the csv gathered during the current iteration under the Tor network
	csv_file = IN_FOLDER + SCRIPT + "_tor_" + str(iteration) + ".csv"
	
	# parse the csv file
	process_csv(csv_file, data_tor)

# the dictionary with the aggregated values of the features. It has a key for each of the above feature and the corresponding value is a list with two elements:
# 1- the average value over all the iterations of the feature under the default network
# 2- the average value over all the iterations of the feature under the Tor network

aggregated_data = defaultdict(list)

# create a DataFrame out of the dictionary with values of the features in order to compute their average values more easily
default_df = pd.DataFrame(data_default)
tor_df = pd.DataFrame(data_tor)
#print default_df
#print tor_df

# the first DataFrame regards features connected to packets' sizes
indexes = ['Avg In Pack', 'Avg Out Pack', 'Avg All Pack', 'Tot In Size', 'Tot Out Size', 'Tot Size']
for key in indexes:
	
	aggregated_data[key].append(default_df[key].mean())
	aggregated_data[key].append(tor_df[key].mean())


# the DataFrame for the features regarding packets' sizes:
# -one row for each of the feature
# -one column for the aggregated value of the feature under the default network, one for the value collected under the Tor network

df = pd.DataFrame(aggregated_data, index=['Default', 'Tor']).transpose()

# The first graphs regards sizes of packets in the network flow
fig, ax = plt.subplots()
ax.set_title('Action: ' + SCRIPT.replace("_", " ") + ' Iterations:' + str(ITERATIONS))
ax.set_ylabel('Size (bytes)')
df.plot(kind = 'bar', ax = ax, rot = 0)
fig.savefig(OUT_FOLDER + SCRIPT + "_packets_sizes.pdf", bbox_inches='tight')


# the second DataFrame regards features connected to the number of packets
indexes = ['Num In Packs', 'Num Out Packs', 'Num Tot Packs', 'Num Unique Sizes']
aggregated_data = defaultdict(list)
for key in indexes:

        aggregated_data[key].append(default_df[key].mean())
        aggregated_data[key].append(tor_df[key].mean())

df = pd.DataFrame(aggregated_data, index=['Default', 'Tor']).transpose()
fig, ax = plt.subplots()
ax.set_title('Action: ' + SCRIPT.replace("_", " ") + ' Iterations:' + str(ITERATIONS))
ax.set_ylabel('Number of packets')
df.plot(kind = 'bar', ax = ax, rot = 0)
fig.savefig(OUT_FOLDER + SCRIPT + "_packets_numbers.pdf", bbox_inches='tight')

# the last DataFrame regards the duration of the flow determined by the user action
indexes = ['Action Duration']
aggregated_data = defaultdict(list)
for key in indexes:

        aggregated_data[key].append(default_df[key].mean())
        aggregated_data[key].append(tor_df[key].mean())

df = pd.DataFrame(aggregated_data, index=['Default', 'Tor']).transpose()
fig, ax = plt.subplots()
ax.set_title('Action: ' + SCRIPT.replace("_", " ") + ' Iterations:' + str(ITERATIONS))
ax.set_ylabel('Action Duration (seconds)')
df.plot(kind = 'bar', ax = ax, rot = 0)
fig.savefig(OUT_FOLDER + SCRIPT + "_duration.pdf", bbox_inches='tight')
plt.show()
